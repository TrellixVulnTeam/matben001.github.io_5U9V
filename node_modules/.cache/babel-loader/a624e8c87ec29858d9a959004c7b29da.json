{"ast":null,"code":"import { useEffect, useLayoutEffect, useState } from 'react';\n/**\r\n * useIsomorphicEffect\r\n * Resolves to useEffect when \"window\" is not in scope and useLayout effect in the browser\r\n * @param {function} callback Callback function to be called on mount\r\n */\n\nconst useIsomorphicEffect = typeof window === \"undefined\" ? useEffect : useLayoutEffect;\nconst nullDimensions = {\n  innerWidth: null,\n  innerHeight: null,\n  outerWidth: null,\n  outerHeight: null\n};\n\nfunction getDimensions() {\n  return {\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight,\n    outerWidth: window.outerWidth,\n    outerHeight: window.outerHeight\n  };\n}\n/**\r\n * useWindowSize hook\r\n * A hook that provides information of the dimensions of the window\r\n * @return Dimensions of the window\r\n */\n\n\nfunction useWindowSize() {\n  const [windowSize, setWindowSize] = useState(() => {\n    if (typeof window !== \"undefined\") {\n      return getDimensions();\n    } else {\n      return nullDimensions;\n    }\n  }); // set resize handler once on mount and clean before unmount\n\n  useIsomorphicEffect(() => {\n    function onResize() {\n      setWindowSize(getDimensions());\n    }\n\n    window.addEventListener(\"resize\", onResize);\n    return () => {\n      window.removeEventListener(\"resize\", onResize);\n    };\n  }, []);\n  return windowSize;\n}\n\nexport default useWindowSize;","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { useEffect, useLayoutEffect, useState } from 'react';\n\n/**\r\n * useIsomorphicEffect\r\n * Resolves to useEffect when \"window\" is not in scope and useLayout effect in the browser\r\n * @param {function} callback Callback function to be called on mount\r\n */\r\nconst useIsomorphicEffect = typeof window === \"undefined\" ? useEffect : useLayoutEffect;\n\nconst nullDimensions = {\r\n    innerWidth: null,\r\n    innerHeight: null,\r\n    outerWidth: null,\r\n    outerHeight: null\r\n};\r\nfunction getDimensions() {\r\n    return {\r\n        innerWidth: window.innerWidth,\r\n        innerHeight: window.innerHeight,\r\n        outerWidth: window.outerWidth,\r\n        outerHeight: window.outerHeight\r\n    };\r\n}\r\n/**\r\n * useWindowSize hook\r\n * A hook that provides information of the dimensions of the window\r\n * @return Dimensions of the window\r\n */\r\nfunction useWindowSize() {\r\n    const [windowSize, setWindowSize] = useState(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            return getDimensions();\r\n        }\r\n        else {\r\n            return nullDimensions;\r\n        }\r\n    });\r\n    // set resize handler once on mount and clean before unmount\r\n    useIsomorphicEffect(() => {\r\n        function onResize() {\r\n            setWindowSize(getDimensions());\r\n        }\r\n        window.addEventListener(\"resize\", onResize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", onResize);\r\n        };\r\n    }, []);\r\n    return windowSize;\r\n}\n\nexport default useWindowSize;\n//# sourceMappingURL=index.esm.js.map\n"]},"metadata":{},"sourceType":"module"}